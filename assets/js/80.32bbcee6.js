(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{414:function(e,t,r){"use strict";r.r(t);var i=r(17),a=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"nsenter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nsenter"}},[e._v("#")]),e._v(" "),t("a",{attrs:{href:"https://man7.org/linux/man-pages/man1/nsenter.1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("nsenter"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("nsenter命令可以进入到目标程序所在的命名空间中执行指定的命令。可以用于在宿主机上调试容器中运行的程序。")]),e._v(" "),t("h2",{attrs:{id:"用法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用法"}},[e._v("#")]),e._v(" 用法")]),e._v(" "),t("p",[e._v("nsenter [options] [program [arguments]]")]),e._v(" "),t("p",[e._v("nsenter会在命名空间中执行program。如果program没有指定，则会执行${SHELL}。")]),e._v(" "),t("h2",{attrs:{id:"参数说明"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参数说明"}},[e._v("#")]),e._v(" 参数说明")]),e._v(" "),t("ul",[t("li",[e._v("-a, --all: 进入目标进程的所有命名空间，默认为/proc/[pid]/ns/* 命名空间路径。")]),e._v(" "),t("li",[e._v("-t, --target PID: 指定目标进程的进程ID。")]),e._v(" "),t("li",[e._v("-m, --mount[=file]: 进入挂载命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的挂载命名空间。")]),e._v(" "),t("li",[e._v("-u, --uts[=file]: 进入UTS命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的UTS命名空间。")]),e._v(" "),t("li",[e._v("-i, --ipc[=file]: 进入IPC命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的IPC命名空间。")]),e._v(" "),t("li",[e._v("-n, --net[=file]: 进入网络命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的网络命名空间。")]),e._v(" "),t("li",[e._v("-p, --pid[=file]: 进入PID命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的PID命名空间。")]),e._v(" "),t("li",[e._v("-U, --user[=file]: 进入用户命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的用户命名空间。")]),e._v(" "),t("li",[e._v("-C, --cgroup[=file]: 进入cgroup命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的cgroup命名空间。")]),e._v(" "),t("li",[e._v("-T, --time[=file]: 进入time命名空间。如果指定了file，则进入file的命名空间。如果不指定文件，则进入target的time命名空间。")]),e._v(" "),t("li",[e._v("-G, --setgid gid: 设置将在进入的命名空间中使用的组ID，并删除补充组。默认是0。")]),e._v(" "),t("li",[e._v("-S, --setuid uid: 设置将在进入的命名空间中使用的用户ID。")]),e._v(" "),t("li",[e._v("--preserve-credentials: 在进入用户命名空间时，不要修改UID和GID。默认情况是删除补充组，并将GID和UID设置为0。")]),e._v(" "),t("li",[e._v("-r, --root[=directory]: 设置根目录。如果没指定目录，则将根目录设置为target进程的根目录。")]),e._v(" "),t("li",[e._v("-w, --wd[=directory]: 设置工作目录。如果没指定目录，则将工作目录设置为target进程的工作目录。")]),e._v(" "),t("li",[e._v("-F, --no-fork: 在exec指定的程序之前不要fork。默认情况下，当进入一个PID命名空间时，nsenter会在调用exec之前调用fork，这样任何子进程也会在新进入的PID命名空间中。")]),e._v(" "),t("li",[e._v("-Z, --follow-context: 根据--target PID指定的已经运行的进程设置用于执行新进程的SELinux安全上下文。")])]),e._v(" "),t("h2",{attrs:{id:"主要用途"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#主要用途"}},[e._v("#")]),e._v(" 主要用途")]),e._v(" "),t("p",[e._v("在容器化的环境中，容器为了轻量级，大多都是不包含基础网络管理工具的。所以使用nsenter可以用来进入容器的网络命名空间，使用宿主机的命令来调试容器的网络。")]),e._v(" "),t("h2",{attrs:{id:"例子"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[e._v("#")]),e._v(" 例子")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("进入容器命名空间步骤:")]),e._v(" "),t("div",{staticClass:"language-linux extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("PID=$(docker inspect -f {{.State.Pid}} 容器名或ID)\nnsenter -a -t ${PID} <命令> 或 nsenter -m -u -i -n -p -t ${PID} <命令>\n")])])])]),e._v(" "),t("li",[t("p",[e._v("纯docker环境:"),t("br"),e._v(" "),t("img",{attrs:{src:"/imgs/commonCmds/nsenter-docker.PNG",alt:"nsenter命令进入容器"}})])]),e._v(" "),t("li",[t("p",[e._v("K8S环境:"),t("br"),e._v(" "),t("img",{attrs:{src:"/imgs/commonCmds/nsenter-k8s.PNG",alt:"nsenter命令进入容器"}})])])])])}),[],!1,null,null,null);t.default=a.exports}}]);