(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{388:function(t,a,s){"use strict";s.r(a);var r=s(17),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"微服务架构模式的核心-应用-application"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务架构模式的核心-应用-application"}},[t._v("#")]),t._v(" 微服务架构模式的核心:应用(application)")]),t._v(" "),a("p",[t._v("今天对学习了赵成老师运维课程之微服务架构时代做一次总结。")]),t._v(" "),a("h2",{attrs:{id:"应用的起源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用的起源"}},[t._v("#")]),t._v(" 应用的起源")]),t._v(" "),a("p",[t._v("微服务架构是从单体架构或分层架构演进过来的。根据业务模型进行细化，拆分出一个个具备不同功能的业务逻辑模块，每个拆分后的微小服务模块都会提供相对应业务逻辑的服务化接口。这些模块可以独立部署和运行，并提供对应的业务能力。")]),t._v(" "),a("h2",{attrs:{id:"应用模型及关系模型的建立"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用模型及关系模型的建立"}},[t._v("#")]),t._v(" 应用模型及关系模型的建立")]),t._v(" "),a("p",[t._v("拆分细化出来的业务逻辑单元若要完成整体的业务流程和目标，必须与其它的服务化应用及基础设施组件交互，所以在应用运行过程中，需要不断地与各种服务组件建立各种各样复杂的关联关系。所以应用模型以及各种关系模型的梳理和建立，能为运维自动化、持续交付以及稳定性保障打下良好的基础。")]),t._v(" "),a("h3",{attrs:{id:"应用业务模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用业务模型"}},[t._v("#")]),t._v(" 应用业务模型")]),t._v(" "),a("p",[t._v("应用业务模型，就是指每个应用对外提供的业务服务能力，并以API的方式暴露给外部。")]),t._v(" "),a("h3",{attrs:{id:"应用管理模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用管理模型"}},[t._v("#")]),t._v(" 应用管理模型")]),t._v(" "),a("p",[t._v("应用管理模型，也就是应用自身的各种属性，如应用名、应用功能信息、责任人、Git地址、部署结构（代码路径、日志路径以及各类配置文件路径等）、启停方式、健康检测方式等 等。这其中，应用名是应用的唯一标识，我们用AppName来表示。")]),t._v(" "),a("h3",{attrs:{id:"应用运行时所依赖的基础设施和组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#应用运行时所依赖的基础设施和组件"}},[t._v("#")]),t._v(" 应用运行时所依赖的基础设施和组件")]),t._v(" "),a("ol",[a("li",[t._v("资源层面：应用运行所必需的资源载体有物理机、虚拟机或容器等，如果对外提供HTTP服务，就需要虚IP和DNS域名服务；")]),t._v(" "),a("li",[t._v("基础组件：即中间件体系，数据库、数据库中间件、缓存、消息队列、存储系统等等。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);