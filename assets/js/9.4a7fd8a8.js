(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{346:function(e,t,r){"use strict";r.r(t);var i=r(17),a=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"数据结构与算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构与算法"}},[e._v("#")]),e._v(" 数据结构与算法")]),e._v(" "),t("h2",{attrs:{id:"数据结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[e._v("#")]),e._v(" 数据结构")]),e._v(" "),t("ul",[t("li",[e._v("一维：\n"),t("ul",[t("li",[e._v("基础数据结构：数组array (string), 链表 linked list")]),e._v(" "),t("li",[e._v("高级数据结构：栈stack, 队列queue, 双端队列deque,集合set, 映射map(hash或map) 等")])])]),e._v(" "),t("li",[e._v("二维:\n"),t("ul",[t("li",[e._v("基础：树tree,  图graph")]),e._v(" "),t("li",[e._v("高级：二叉搜索树binary search tree(red-black tree,VAL) 堆heap,并查集disjoint set,字典树Trie等")])])]),e._v(" "),t("li",[e._v("特殊数据结构：\n"),t("ul",[t("li",[e._v("位运算Bitwise, 布隆过滤器BloomFilter")]),e._v(" "),t("li",[e._v("LRU Cache")])])])]),e._v(" "),t("h2",{attrs:{id:"算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[e._v("#")]),e._v(" 算法")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("基础算法")]),e._v(" "),t("ul",[t("li",[e._v("跳转语句(branch)：If-else, switch")]),e._v(" "),t("li",[e._v("循环迭代(iteration): for,while loop")]),e._v(" "),t("li",[e._v("递归Recursion(Divide & Conquer, Backtrace)")])]),e._v(" "),t("p",[e._v("任何高级的算法都是由基础算法实现，算法的根本就是找到重复单元，基于重复单元便可以泛化成高级算法。")])]),e._v(" "),t("li",[t("p",[e._v("高级算法")]),e._v(" "),t("ul",[t("li",[e._v("搜索 Search: 深度优先搜索 Depth first search,广度优先搜索 Breadth first search, 启发式搜索A* 等")]),e._v(" "),t("li",[e._v("动态规划 Dynamic Programming")]),e._v(" "),t("li",[e._v("二分查找 Binary Search")]),e._v(" "),t("li",[e._v("贪心 Greedy")]),e._v(" "),t("li",[e._v("数学 Math, 几何 Geometry")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);