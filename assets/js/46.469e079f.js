(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{383:function(t,v,_){"use strict";_.r(v);var a=_(17),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"如何打造运维组织架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#如何打造运维组织架构"}},[t._v("#")]),t._v(" 如何打造运维组织架构")]),t._v(" "),v("h2",{attrs:{id:"从价值呈现的角度看运维"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#从价值呈现的角度看运维"}},[t._v("#")]),t._v(" 从价值呈现的角度看运维")]),t._v(" "),v("p",[t._v("研发团队最重要的目标：效率、稳定和成本。从运维的角度来说，能够与这三个点契合的事情，主要有以下五点：")]),t._v(" "),v("ol",[v("li",[t._v("运维基础平台体系建设：主要包括标准化体系及CMDB、应用配置管理、DNS域名管理、资源管理等偏向运维自身体系的建设。是运维的基础和核心。")]),t._v(" "),v("li",[t._v("分布式中间件的服务化建设：在整个技术架构体系中，分布式中间件基础服务这一块起到了支撑作用。这一部分的标准化和服务化非常关键，特别是基于开源产品的二次开发或自研的中间件产品，更需要有对应的标 准化和服务化建设。")]),t._v(" "),v("li",[t._v("持续交付体系建设:  持续交付体系是拉通运维和业务开发的关键纽带，是提升整个研发团队效率的关键部分。这个部分是整个软件或应用的生命周期的管理体系，包括从应用创建、研发阶段的持续集成，上线阶段的持续部署发布，再到线上运行阶段的各类资源服务扩容缩容等。开发和运维的矛盾往往比较容易在这个过程中爆发出来，但是这个体系建设依赖上面两部分的基础、所以要整体去看。")]),t._v(" "),v("li",[t._v("稳定性体系建设： 软件系统线上的稳定性保障，包括如何快速发现线上问题、如何快速定位问题、如何快速从故障中恢复业务、如何有效评估系统容量等。动作机制的建设：如何对故障应急响应、如何对故障进行有效管理、如何对故复盘、如何加强日常演练等。")]),t._v(" "),v("li",[t._v("技术运营体系建设： 技术运营体系偏动作机制方面的建设，最主要是确保我们制定的标准、指标、规则和流程能够有效落地。有些需要通过技术平台实现、有些需要管理流程、有些需要执行人的沟通协作。")])]),t._v(" "),v("h2",{attrs:{id:"技术运营人员所需要的意识和能力"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#技术运营人员所需要的意识和能力"}},[t._v("#")]),t._v(" 技术运营人员所需要的意识和能力")]),t._v(" "),v("ol",[v("li",[t._v("要有制定输出标准的意识和能力")]),t._v(" "),v("li",[t._v("要有规范流程制定的能力")]),t._v(" "),v("li",[t._v("能将标准和流程固化到工具平台中")]),t._v(" "),v("li",[t._v("能确保承载了标准和规范的平台落地")])]),t._v(" "),v("p",[t._v("总体总结为规划、设计和落地能力")])])}),[],!1,null,null,null);v.default=s.exports}}]);